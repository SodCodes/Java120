/*
Name: Sod
Date: 09/27/2023
Description: Vocab Assignment 
*/

//Import packages
import java.util.*;
public class Main
{
    static Scanner input = new Scanner(System.in);
    public static void main(String[] args)

    {
        int number; //define variable
        //Welcome message
        System.out.println("Welcome to CTEC 120 Vocab Study Guide");
        System.out.println("Please enter a number between 1-46"); //Prompt user for input
        number = input.nextInt();
        //Display output of selected number
        switch (number)
        {
            case 1:
                System.out.println("Access Level");
                System.out.println("Definition:  Access level refers to the level of visibility or accessibility of a variable, \n method, or class from other parts of a program. It determines \n which parts of a program can access, modify, or use a particular element.");
                break;
            case 2:
                System.out.println("Access Modifier");
                System.out.println("Definition: An access modifier is a keyword in object-oriented programming languages that specifies the access level of a class, method, or variable. \n It controls which parts of a program can use or modify the element.");
                break;
            case 3:
                System.out.println("Actual Parameter");
                System.out.println("Definition: An actual parameter (also known as an argument) is a value that is passed to a method when it is called. \n It is used to supply specific data or information needed for the method to perform its task.");
                break;
            case 4:
                System.out.println("Argument");
                System.out.println("Definition: An argument, also known as an actual parameter, \n is the value that is passed to a method when it is called. \n It provides specific data or information that the method uses to perform its task.");
                break;
            case 5:
                System.out.println("Boundary Value");
                System.out.println("Definition: Boundary value refers to the edge or limit of a range of values. \n In software testing, boundary value analysis is a technique used to test the behavior of a program at the boundaries of input ranges.");
                break;
                case 6:
            System.out.println("Call");
            System.out.println("Definition: A call refers to the action of invoking or executing a method. \n When a method is called, the program transfers control to the method, and the method's code is executed.");
            break;
            case 7:
                System.out.println("Class Libraries");
                System.out.println("Definition: Class libraries are collections of pre-written, \n reusable classes and methods that provide common functionality for a specific programming language. \n They save time and effort by allowing programmers to use existing code instead of writing it from scratch.");
                break;
            case 8:
                System.out.println("Class Method");
                System.out.println("Definition: A class method is a method that belongs to the class itself rather than to an instance of the class. \n It can be called without creating an object of the class.");
                break;
            case 9:
                System.out.println("Driver");
                System.out.println("Definition: A driver is a program or component that controls or manages the execution of another program or device. \n In software testing, a driver is used to invoke and test a specific method or module.");
                break;
            case 10:
                System.out.println("Flow of Execution");
                System.out.println("Definition: The flow of execution refers to the sequence in which statements in a program are executed. \n It starts from the first statement and proceeds sequentially unless directed otherwise by control flow statements like loops and conditionals.");
                break;
            case 11:
                System.out.println("Formal Parameter");
                System.out.println("Definition: A formal parameter is a variable in a method's definition that represents a value to be supplied when the method is called. \n It acts as a placeholder for the actual parameter.");
                break;
            case 12:
                System.out.println("Local Identifier");
                System.out.println("Definition: A local identifier is a variable or symbol that is declared within a specific block or scope in a program. \n It is only accessible within that block or scope.");
                break;
            case 13:
                System.out.println("Method Body");
                System.out.println("Definition: The method body contains the actual code or instructions that define what the method does when it is called. \n It is enclosed within curly braces {}.");
                break;
                case 14:
            System.out.println("Method Call");
            System.out.println("Definition: A method call is the act of invoking or executing a method. \n It involves specifying the method name and providing the necessary arguments (actual parameters).");
            break;
            case 15:
                System.out.println("Method Declaration");
                System.out.println("Definition: A method declaration is a statement that defines the name, return type, and parameter list of a method. \n It does not contain the actual code for the method.");
                break;
            case 16:
                System.out.println("Method Definition");
                System.out.println("Definition: A method definition provides the actual implementation or code for a method.\n It specifies what the method does when it is called.");
                break;
            case 17:
                System.out.println("Method Heading");
                System.out.println("Definition: The method heading includes the method's name, return type, and parameter list.\n It is part of the method declaration.");
                break;
            case 18:
                System.out.println("Method Name");
                System.out.println("Definition: The method name is the identifier used to refer to a specific method.\n It is used in method calls to indicate which method should be executed.");
                break;
            case 19:
                System.out.println("Method Parameter");
                System.out.println("Definition: A method parameter is a variable that receives a value when a method is called.\n It acts as a placeholder for the actual parameter.\n");
                break;
                case 20:
            System.out.println("Method Stub");
            System.out.println("Definition: A method stub is a placeholder or temporary implementation of a method.\n It is used for testing or as a temporary solution until the actual method is implemented.\n");
            break;
            case 21:
                System.out.println("Method Type");
                System.out.println("Definition: Method type refers to whether a method is a value-returning method\n (returns a value) or a void method (does not return a value).");
                break;
            case 22:
                System.out.println("Modifier");
                System.out.println("Definition: A modifier is a keyword used in programming to change the properties or behaviors of a class, method, or variable.\n It can control access levels, behavior, or characteristics.");
                break;
            case 23:
                System.out.println("New (the operator)");
                System.out.println("Definition: The new operator is used in object-oriented programming to create an instance of a class.\n It allocates memory for the object and calls the object's constructor.");
                break;
            case 24:
                System.out.println("Nonstatic Method");
                System.out.println("Definition: A nonstatic method is a method that operates on the attributes or properties of a specific instance of a class.\n It is called on an object of the class.");
                break;
            case 25:
                System.out.println("Object");
                System.out.println("Definition: An object is an instance of a class in object-oriented programming.\n It represents a specific entity with its own attributes (data) and behaviors (methods).");
                break;
            case 26:
                System.out.println("Palindrome");
                System.out.println("Definition: A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward\n (ignoring spaces, punctuation, and capitalization).");
                break;
            case 27:
                System.out.println("Parameters (or Arguments)");
                System.out.println("Definition: Parameters (or arguments) are values passed to a method when it is called. \n They provide specific data or information needed for the method to perform its task.");
                break;
            case 28:
                System.out.println("Parameter Passing Technique");
                System.out.println("Definition: Parameter passing technique refers to the method used to pass values to a method when it is called. \nThere are different techniques, such as pass by value and pass by reference.");
                break;
            case 29:
                System.out.println("Pass");
                System.out.println("Definition: In the context of method calls,\n pass means supplying values (arguments) to a method when it is called.");
                break;
            case 30:
                System.out.println("Pass by Value Parameter Passing Technique");
                System.out.println("Definition: Pass by value is a parameter passing technique in which a copy of the actual parameter's value is passed to the method. Changes made to the parameter within the method do not affect the original value.\n");
                break;
            case 31:
                System.out.println("Procedural Abstraction");
                System.out.println("Definition: Procedural abstraction is the process of hiding the implementation details of a procedure or method, \n focusing only on what the procedure does (its purpose or functionality).");
                break;
            case 32:
                System.out.println("Postcondition");
                System.out.println("Definition: A postcondition is a condition or statement that must be true after a method has been executed. \n It describes the expected state or result.");
                break;
                case 33:
            System.out.println("Precondition");
            System.out.println("Definition: A precondition is a condition or statement that must be true before a method is called. \n It defines the requirements or expectations for calling the method.");
            break;
            case 34:
            System.out.println("Predefined Method");
            System.out.println("Definition: A predefined method is a method that is provided by a programming language or a library, \n and it can be used without the need for the programmer to write the implementation.");
            break;
            case 35:
            System.out.println("Primitive Type Variables");
            System.out.println("Definition: Primitive type variables represent simple data types in programming, such as integers, floating-point numbers, characters, and booleans.\n They hold basic values directly.");
            break;
            case 36:
                System.out.println("Reference Variables");
                System.out.println("Definition: Reference variables hold memory addresses that point to objects in object-oriented programming.\n They allow access to the properties and methods of those objects.");
                break;
            case 37:
                System.out.println("ReturnType");
                System.out.println("Definition: ReturnType refers to the data type of the value that a method returns.\n If a method does not return a value, its return type is specified as void.");
                break;
            case 38:
                System.out.println("Scope");
                System.out.println("Definition: Scope refers to the region or context in a program where a variable or identifier is accessible. \n It defines where in the program the variable can be used.\n");
                break;
            case 39:
                System.out.println("Signature of a Method");
                System.out.println("Definition: The signature of a method consists of its name and parameter list. \n It uniquely identifies the method and specifies the type and number of parameters it accepts.\n");
                break;
            case 40:
                System.out.println("Static Method");
                System.out.println("Definition: A static method belongs to the class rather than to any specific instance of the class.\n  It can be called without creating an object of the class.");
                break;
            case 41:
                System.out.println("Top-Down Development");
                System.out.println("Definition: Top-down development is a software development approach where a problem is broken down into smaller, more manageable pieces. \n Each piece is then developed and tested separately before being integrated into the whole system.");
                break;
            case 42:
                System.out.println("User-Defined Method");
                System.out.println("Definition: A user-defined method is a method created by the programmer to perform a specific task. \n It is not provided by the programming language or a library.");
                break;
            case 43:
                System.out.println("Value-Returning Method");
                System.out.println("Definition: A value-returning method is a method that performs a task and returns a value as a result. \n The return type specifies the type of value that the method will return.");
                break;
            case 44:
                System.out.println("Variable");
                System.out.println("Definition: A variable is a storage location in a program where data can be stored and retrieved. \n It has a name, a data type, and a value.");
                break;
            case 45:
                System.out.println("Visibility");
                System.out.println("Definition: Visibility refers to the level of access or exposure that a variable, method, or class has within a program. \n It determines which parts of the program can use or interact with the element.");
                break;
            case 46:
                System.out.println("Void Method");
                System.out.println("Definition: A void method is a method that does not return any value.\n It performs a task or operation, but it does not produce a result.");
                break;
            default:
                System.out.println("Invalid Input. Please input a number between 1-46");

        }



    }
